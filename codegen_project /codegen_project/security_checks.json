{
  "security": [
    "Sanitize and validate all user inputs to prevent SQL Injection, XSS, and other injection attacks.",
    "Use parameterized queries or ORM to interact with databases.",
    "Implement API rate limiting (e.g., 100 requests per second) to prevent denial-of-service attacks.",
    "Use strong authentication and authorization mechanisms (OAuth 2.0, JWT, etc.).",
    "Enforce HTTPS for all communications.",
    "Implement CSRF protection in forms and state-changing requests.",
    "Validate and sanitize file uploads to prevent malicious file execution.",
    "Apply proper access controls to APIs and resources.",
    "Hash passwords with strong algorithms like bcrypt or Argon2 before storing.",
    "Limit the size of incoming requests to prevent large payload attacks.",
    "Escape output to prevent Cross-Site Scripting (XSS).",
    "Use Content Security Policy (CSP) headers to protect against XSS.",
    "Set secure cookies with HttpOnly and SameSite attributes.",
    "Implement proper session management and timeout.",
    "Log security events and monitor suspicious activity.",
    "Implement error handling to avoid exposing sensitive information or stack traces.",
    "Use dependency checking tools to avoid vulnerabilities in libraries or packages.",
    "Apply input/output encoding where necessary.",
    "Avoid using deprecated or insecure APIs.",
    "Use secure random generators for tokens, IDs, and passwords.",
    "Regularly update and patch software dependencies and servers.",
    "Implement two-factor authentication (2FA) for sensitive operations.",
    "Validate JSON, XML, or other data formats before parsing.",
    "Use server-side validation for all critical operations.",
    "Avoid hardcoding secrets or credentials in source code.",
    "Use environment variables to manage secrets securely.",
    "Validate email format using regex (e.g., /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/).",
    "Ensure mobile number format is valid using regex based on country codes (e.g., /^\\+?[1-9][0-9]{7,14}$/).",
    "Enforce email domain whitelisting for corporate systems if necessary.",
    "Prevent duplicate emails and mobile numbers in user records.",
    "Verify email addresses using OTP or email confirmation links.",
    "Use phone number verification (e.g., OTP-based authentication) for security.",
    "All Django models must explicitly declare 'id = models.BigAutoField(primary_key=True)' to avoid relying on default AutoField behavior and ensure consistency with DEFAULT_AUTO_FIELD."

  ],
  "error_classes": [
    "ValidationError",
    "PermissionDenied",
    "SyntaxError",
    "RuntimeError",
    "IOError",
    "FileNotFoundError",
    "TypeError",
    "ValueError",
    "KeyError",
    "IndexError",
    "TimeoutError",
    "ConnectionError",
    "AuthenticationError",
    "AuthorizationError",
    "CSRFError",
    "IntegrityError",
    "DatabaseError",
    "RequestEntityTooLarge",
    "UnsupportedMediaType",
    "ConflictError",
    "TooManyRequestsError",
    "ServiceUnavailableError",
    "MemoryError",
    "NullPointerException",
    "IllegalArgumentException",
    "ResourceNotFoundError",
    "BadRequestError",
    "InvalidEmailFormatError",
    "InvalidPhoneNumberError"
  ]
}
